{"version":3,"sources":["SocketIO.js"],"names":["SIO","cc","Class","extends","Component","statics","ip","port","addr","sio","handlers","fnDisconnect","isPinging","lastSendTime","lastRecieveTime","delay","addHandler","event","fn","log","handler","data","JSON","parse","on","connect","fnConnect","fnError","self","opts","window","io","connected","close","timeout","error","key","heartbeat","Date","now","game","EVENT_HIDE","ping","setInterval","bind","disconnect","send","stringify","emit","test","fnResult","params","account","th","userManager","sign","http","get","err"],"mappings":"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","file":"SocketIO.js","sourceRoot":"..\\..\\..\\..\\assets\\scripts","sourcesContent":["/*\r\nif(window.io == null){\r\n    window.io = require(\"socket.io\");\r\n}\r\n*/\r\nvar SIO=cc.Class({\r\n    extends: cc.Component,\r\n\r\n    statics:{\r\n        ip:null,\r\n        port:null,\r\n        addr:null,\r\n        sio:null,\r\n        handlers:{},\r\n        fnDisconnect:null,\r\n        isPinging:false,\r\n        lastSendTime:0,\r\n        lastRecieveTime:0,\r\n        delay:0,\r\n        //fnDisconnect:null,\r\n        addHandler:function(event,fn){\r\n            if(this.handlers[event]){\r\n                cc.log(\"event:\" + event + \"' handler has been registered.\");\r\n                return;\r\n            }\r\n            var handler = function(data){\r\n                if(event != \"disconnect\" && typeof(data) == \"string\"){\r\n                    data = JSON.parse(data);\r\n                }\r\n                fn(data);\r\n            };\r\n            this.handlers[event] = handler; \r\n            if(this.sio){\r\n                cc.log(\"register event: \" + event);\r\n                this.sio.on(event,handler);\r\n            }\r\n        },\r\n        connect:function(fnConnect,fnError){\r\n            var self=this;\r\n            cc.log(\"connect to : \"+this.addr);\r\n            var opts = {\r\n                'reconnection':false,\r\n                'force new connection': true,\r\n                'transports':['websocket', 'polling']\r\n            }\r\n            this.sio = window.io.connect(this.addr,opts);\r\n            this.sio.on('connect',function(data){\r\n                self.sio.connected = true;\r\n                fnConnect(data);\r\n            });\r\n            this.sio.on('disconnect',function(data){\r\n                cc.log(\"disconnect\");\r\n                self.sio.connected = false;\r\n                self.close();\r\n            });\r\n            this.sio.on('reconnect',function(){\r\n                cc.log('reconnect');\r\n            });\r\n            this.sio.on('connect_error',function (){\r\n                cc.log('connect_error');\r\n            });\r\n            this.sio.on('connect_timeout', (timeout) => {\r\n                cc.log('connect_timeout');\r\n            });\r\n            this.sio.on('reconnect_error', (error) => {\r\n                cc.log('reconnect_error');\r\n            });\r\n            this.sio.on('reconnect_failed', (error) => {\r\n                cc.log('reconnect_failed');\r\n            });\r\n            this.sio.on('error', (error) => {\r\n                cc.log('error');\r\n                fnError(error);\r\n            });\r\n\r\n            for(var key in this.handlers){\r\n                var handler = this.handlers[key];\r\n                if(typeof(handler) == \"function\"){\r\n                    if(key == 'disconnect'){\r\n                        this.fnDisconnect = handler;\r\n                    }else{\r\n                        cc.log(\"register event: \" + key);\r\n                        this.sio.on(key,handler);         \r\n                    }\r\n                }\r\n            }\r\n\r\n            this.heartbeat();\r\n        },\r\n        heartbeat:function(){\r\n            var self=this;\r\n            this.lastRecieveTime = Date.now();\r\n            this.sio.on('th-pong',function(){\r\n                cc.log(\"th-pong\");\r\n                self.lastRecieveTime = Date.now();\r\n                self.delay = self.lastRecieveTime - self.lastSendTime;\r\n                //cc.log('th-pong:',self.delay,self==th.sio);\r\n            });\r\n            if(!self.isPinging){\r\n                self.isPinging = true;\r\n                cc.game.on(cc.game.EVENT_HIDE,function(){\r\n                    self.ping();\r\n                });\r\n                //每5秒ping一下服务器\r\n                setInterval(function(){\r\n                    if(self.sio){\r\n                        self.ping();                \r\n                    }\r\n                }.bind(this),5000);\r\n                //每1000毫秒检查一次最后收到消息时间，如果大于10秒就是断开\r\n                setInterval(function(){\r\n                    if(self.sio){\r\n                        if(Date.now() - self.lastRecieveTime > 10000){\r\n                            self.close();\r\n                        }         \r\n                    }\r\n                }.bind(this),500);\r\n            }   \r\n        },\r\n        close:function(){\r\n            if(this.sio && this.sio.connected){\r\n                this.sio.connected = false;\r\n                this.sio.disconnect();\r\n            }\r\n            this.sio = null;\r\n            if(this.fnDisconnect){\r\n                this.fnDisconnect();\r\n                this.fnDisconnect = null;\r\n            }\r\n        },\r\n        send:function(event,data){\r\n            if(this.sio&&this.sio.connected){\r\n                if(data&&typeof(data)=='object'){\r\n                    data==JSON.stringify(data);\r\n                }\r\n                this.sio.emit(event,data);\r\n            }\r\n        },\r\n        ping:function(){\r\n            if(this.sio){\r\n                this.lastSendTime=Date.now();\r\n                this.send('th-ping');\r\n            }\r\n        },\r\n        test:function(fnResult){\r\n            var params = {\r\n                account:th.userManager.account,\r\n                sign:th.userManager.sign,\r\n                ip:this.ip,\r\n                port:this.port,\r\n            }\r\n            cc.log(\"test:\",params,this.addr);\r\n            th.http.get('/is_server_online',params,function(err,data){\r\n                cc.log(data);\r\n                fnResult(err,data)\r\n            });\r\n            /*\r\n            setTimeout(function(){\r\n                if(xhr){\r\n                    xhr.abort();\r\n                    fnResult(false);                    \r\n                }\r\n            },1500);\r\n            */\r\n        }\r\n\r\n    }\r\n});"]}