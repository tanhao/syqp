{"version":3,"sources":["MJReConnect.js"],"names":["cc","Class","extends","Component","properties","_reconnect","_lblTip","_loading_image","_lastPing","onLoad","log","find","getChildByName","self","fnTestServerOn","th","sio","test","err","data","errcode","isOnline","setTimeout","roomId","userManager","socketIOManager","resetRound","joinRoom","director","loadScene","fn","node","off","active","on","update","dt","rotation"],"mappings":";;;;;;AAAAA,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY;AACRC,oBAAY,IADJ;AAERC,iBAAS,IAFD;AAGRC,wBAAgB,IAHR;AAIRC,mBAAW;AAJH,KAHP;;AAUL;AACAC,YAAQ,kBAAY;AAChBT,WAAGU,GAAH,CAAO,oBAAP;AACA,aAAKL,UAAL,GAAkBL,GAAGW,IAAH,CAAQ,kBAAR,CAAlB;AACA,aAAKJ,cAAL,GAAsB,KAAKF,UAAL,CAAgBO,cAAhB,CAA+B,eAA/B,CAAtB;AACA,YAAIC,OAAO,IAAX;;AAEA,YAAIC,iBAAiB,SAAjBA,cAAiB,GAAY;AAC7BC,eAAGC,GAAH,CAAOC,IAAP,CAAY,UAASC,GAAT,EAAaC,IAAb,EAAkB;AAC1BnB,mBAAGU,GAAH,CAAO,6BAAP,EAAqCS,IAArC;AACA,oBAAGD,OAAKC,KAAKC,OAAV,IAAmBD,KAAKE,QAAL,IAAe,KAArC,EAA2C;AACvCC,+BAAWR,cAAX,EAA2B,IAA3B;AACH,iBAFD,MAEK;AACD,wBAAIS,SAAOR,GAAGS,WAAH,CAAeD,MAA1B;AACAR,uBAAGU,eAAH,CAAmBC,UAAnB;AACA,wBAAIH,UAAU,IAAd,EAAoB;AAChBR,2BAAGS,WAAH,CAAeD,MAAf,GAAsB,IAAtB;AACAR,2BAAGS,WAAH,CAAeG,QAAf,CAAwBJ,MAAxB,EAA+B,UAASJ,IAAT,EAAc;AACzC,gCAAGA,KAAKC,OAAL,IAAc,CAAjB,EAAmB;AACfL,mCAAGU,eAAH,CAAmBF,MAAnB,GAA0B,IAA1B;AACAvB,mCAAG4B,QAAH,CAAYC,SAAZ,CAAsB,MAAtB;AACH;AACJ,yBALD;AAMH;AACJ;AACJ,aAjBD;AAkBH,SAnBD;;AAqBA,YAAIC,KAAK,SAALA,EAAK,CAAUX,IAAV,EAAgB;AACrBN,iBAAKkB,IAAL,CAAUC,GAAV,CAAc,YAAd,EAA4BF,EAA5B;AACAjB,iBAAKR,UAAL,CAAgB4B,MAAhB,GAAyB,IAAzB;AACAjC,eAAGU,GAAH,CAAO,wBAAP;AACAI;AACH,SALD;AAMA;;;;;;;;;AASA,aAAKiB,IAAL,CAAUG,EAAV,CAAa,iBAAb,EAAgC,YAAY;AACxCrB,iBAAKR,UAAL,CAAgB4B,MAAhB,GAAyB,KAAzB;AACApB,iBAAKkB,IAAL,CAAUG,EAAV,CAAa,YAAb,EAA2BJ,EAA3B;AACH,SAHD;;AAMA,aAAKC,IAAL,CAAUG,EAAV,CAAa,YAAb,EAA2BJ,EAA3B;AACH,KA5DI;AA6DLK,YAAQ,gBAAUC,EAAV,EAAc;AAClB,YAAI,KAAK/B,UAAL,CAAgB4B,MAApB,EAA4B;AACxB,iBAAK1B,cAAL,CAAoB8B,QAApB,GAA+B,KAAK9B,cAAL,CAAoB8B,QAApB,GAA+BD,KAAK,EAAnE;AACH;AACJ;AAjEI,CAAT","file":"MJReConnect.js","sourceRoot":"..\\..\\..\\..\\..\\assets\\scripts\\components","sourcesContent":["cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        _reconnect: null,\r\n        _lblTip: null,\r\n        _loading_image: null,\r\n        _lastPing: 0,\r\n    },\r\n\r\n    // use this for initialization\r\n    onLoad: function () {\r\n        cc.log(\"MJReconnect onload\");\r\n        this._reconnect = cc.find(\"Canvas/ReConnect\");\r\n        this._loading_image = this._reconnect.getChildByName(\"loading_image\");\r\n        var self = this;\r\n\r\n        var fnTestServerOn = function () {\r\n            th.sio.test(function(err,data){\r\n                cc.log(\"MJReConnect fnTestServerOn:\",data);\r\n                if(err||data.errcode||data.isOnline==false){\r\n                    setTimeout(fnTestServerOn, 3000);\r\n                }else{\r\n                    var roomId=th.userManager.roomId;\r\n                    th.socketIOManager.resetRound();\r\n                    if (roomId != null) {\r\n                        th.userManager.roomId=null;\r\n                        th.userManager.joinRoom(roomId,function(data){\r\n                            if(data.errcode!=0){\r\n                                th.socketIOManager.roomId=null;\r\n                                cc.director.loadScene('hall');\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        var fn = function (data) {\r\n            self.node.off('disconnect', fn);\r\n            self._reconnect.active = true;\r\n            cc.log(\"MJREConnect disconnect\");\r\n            fnTestServerOn();\r\n        };\r\n        /*\r\n        cc.game.on(cc.game.EVENT_HIDE, function () {\r\n            cc.log(\"MJREConnect EVENT_HIDE\");\r\n        });\r\n        cc.game.on(cc.game.EVENT_SHOW, function () {\r\n            cc.log(\"MJREConnect EVENT_SHOW\");\r\n        });\r\n        */\r\n       \r\n        this.node.on('connect_success', function () {\r\n            self._reconnect.active = false;\r\n            self.node.on('disconnect', fn);\r\n        });\r\n        \r\n\r\n        this.node.on('disconnect', fn);\r\n    },\r\n    update: function (dt) {\r\n        if (this._reconnect.active) {\r\n            this._loading_image.rotation = this._loading_image.rotation - dt * 45;\r\n        }\r\n    },\r\n});\r\n"]}